name: FinSight CI/CD Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  IMAGE_NAME: finsight
  REGION: ${{ secrets.GCP_REGION }}

permissions:
  contents: read
  id-token: write

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.0'
          cache: 'pip'  # Enable pip caching

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Basic Test
        run: |
          python -c "import app; print('App imports successfully')"

  deploy:
    name: Build and Deploy
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Google Auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Diagnostic Check
        run: |
          echo "Checking Google Cloud Configuration..."
          gcloud config list
          echo "Checking Docker Configuration..."
          docker info
          echo "Checking Artifact Registry Access..."
          gcloud artifacts repositories list
          echo "Checking Cloud Run Service Account Permissions..."
          gcloud projects get-iam-policy ${{ env.PROJECT_ID }} --flatten="bindings[].members" --format='table(bindings.role)' --filter="bindings.members:${{ env.PROJECT_ID }}"

      - name: Build and Push Image
        run: |
          echo "Starting Docker build..."
          docker build --no-cache -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}/app:${{ github.sha }} . 2>&1 | tee build.log || {
            echo "Docker build failed. Last 10 lines of build log:"
            tail -n 10 build.log
            exit 1
          }
          echo "Starting Docker push..."
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}/app:${{ github.sha }} 2>&1 | tee push.log || {
            echo "Docker push failed. Last 10 lines of push log:"
            tail -n 10 push.log
            exit 1
          }

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: ${{ env.IMAGE_NAME }}
          image: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}/app:${{ github.sha }}
          region: ${{ env.REGION }}
          env_vars: |
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}
            BANKSIGHT_API=${{ secrets.BANKSIGHT_API }}
          flags: |
            --allow-unauthenticated
            --memory=2Gi
            --cpu=1

      - name: Verify Deployment
        if: ${{ success() }}
        run: |
          echo "Deployment Status: Success"
          echo "Service URL: ${{ steps.deploy.outputs.url }}"
          echo "Checking service health..."
          # Wait for service to be fully available
          sleep 30
          # Perform health check with detailed output
          HTTP_STATUS=$(curl -s -o response.txt -w "%{http_code}" ${{ steps.deploy.outputs.url }})
          echo "HTTP Status Code: $HTTP_STATUS"
          echo "Response Body:"
          cat response.txt
          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo "Service health check failed!"
            echo "Checking service logs..."
            gcloud logging read "resource.type=cloud_run_revision AND resource.labels.service_name=${{ env.IMAGE_NAME }}" --limit 10
            exit 1
          fi

      - name: Error Information
        if: ${{ failure() }}
        run: |
          echo "Deployment failed. Collecting error information..."
          echo "1. Checking Cloud Run Service Status..."
          gcloud run services describe ${{ env.IMAGE_NAME }} --region ${{ env.REGION }} || true
          echo "2. Checking Recent Logs..."
          gcloud logging read "resource.type=cloud_run_revision AND resource.labels.service_name=${{ env.IMAGE_NAME }}" --limit=5 || true
          echo "3. Verifying Image Presence..."
          gcloud artifacts docker images list ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }} || true