import os
from flask import Flask, render_template, request
import subprocess
import sys
import pandas as pd
from pathlib import Path

# Get API keys from environment variables
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
HUGGINGFACE_API_KEY = os.getenv('HUGGINGFACE_API_KEY')

app = Flask(__name__)

def get_chart_data_from_pipeline(ticker):
    """
    Reads historical data from the file generated by the data ingestion pipeline.
    """
    try:
        # The data ingestion pipeline saves the data here
        data_path = Path('artifacts/data_ingestion/raw_data.csv')
        if not data_path.exists():
            print(f"Data file not found at {data_path}")
            return None, None

        hist_df = pd.read_csv(data_path)
        
        # Filter for the specific ticker
        hist_df = hist_df[hist_df['Ticker'] == ticker]
        
        if hist_df.empty:
            print(f"No data found for ticker {ticker}")
            return None, None
            
        # Ensure data is sorted by date if not already
        hist_df['Datetime'] = pd.to_datetime(hist_df['Datetime'])
        hist_df = hist_df.sort_values('Datetime')

        # Get the last 7 days for the chart
        last_7_days = hist_df.tail(7)
        
        if len(last_7_days) == 0:
            print(f"No recent data found for ticker {ticker}")
            return None, None
            
        prices = last_7_days['Close'].tolist()
        dates = last_7_days['Datetime'].dt.strftime('%Y-%m-%d').tolist()
        
        print(f"Chart data prepared: {len(dates)} dates and {len(prices)} prices for {ticker}")
        return prices, dates
    except Exception as e:
        print(f"Error reading historical data for chart: {e}")
        return None, None


@app.route('/')
def index():
    return render_template('index.html')

@app.route('/predict', methods=['POST'])
def predict():
    choice = request.form['choice']
    ticker = request.form.get('ticker') # Safely get the ticker

    # Build the command to run the ML pipeline
    command = [sys.executable, 'main.py', '--choice', choice]
    if choice == '1':
        if not ticker:
            return render_template('index.html', prediction_text="Error: Ticker symbol is required for manual prediction.")
        command.extend(['--ticker', ticker])

    # Execute the pipeline script with UTF-8 encoding
    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, encoding='utf-8', errors='ignore')
    stdout, stderr = process.communicate()

    if process.returncode != 0:
        return render_template('index.html', prediction_text=f"Error running prediction pipeline: {stderr}")

    # Parse the output from the script, ensuring stdout is not None
    prediction_text = ""
    if stdout:
        lines = stdout.splitlines()
        for line in lines:
            if "LLM Selected Ticker:" in line:
                ticker = line.split(':')[1].strip()
            elif "Predicted Close Price for" in line:
                prediction_text = line

    if not ticker or not prediction_text:
        return render_template('index.html', prediction_text="Could not retrieve prediction. Please check the logs.")

    # Fetch historical data for the chart from the pipeline's output
    prices, dates = get_chart_data_from_pipeline(ticker)
    chart_data = None
    if prices and dates:
        try:
            # Extract the predicted price from the prediction text
            predicted_price_str = prediction_text.split(':')[-1].strip()
            predicted_price = float(predicted_price_str)
            
            print(f"Creating chart data with prediction {predicted_price} for {ticker}")
            
            chart_data = {
                'dates': dates,
                'prices': prices,
                'prediction': predicted_price,
                'ticker': ticker
            }
            
            print(f"Chart data created: {chart_data}")
            
            # Keep the prediction text as is since it's already formatted

        except (ValueError, IndexError):
            # If parsing fails, show the raw text but no chart
            pass

    return render_template('index.html', prediction_text=prediction_text, chart_data=chart_data)


if __name__ == '__main__':
    port = int(os.environ.get('PORT', 8080))
    app.run(host='0.0.0.0', port=port)
